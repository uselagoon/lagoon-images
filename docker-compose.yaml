version: '3.2'
services:
  api-db:
    image: ${IMAGE_REPO:-lagoon}/api-db:${IMAGE_TAG}
    #volumes:
      ##- ./services/api-db/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      ##- ./services/api-db/rerun_initdb.sh:/rerun_initdb.sh
    ports:
      - '3366:3306'
    labels:
      lagoon.type: custom
      lagoon.template: services/api-db/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/api-db:v1-8-2
  webhook-handler:
    image: ${IMAGE_REPO:-lagoon}/webhook-handler:${IMAGE_TAG}
    command: yarn run dev
    ports:
      - '7777:3000'
    #volumes:
      #- ./services/webhook-handler/src:/app/services/webhook-handler/src
      #- ./node-packages:/app/node-packages:delegated
    labels:
      lagoon.type: custom
      lagoon.template: services/webhook-handler/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/webhook-handler:v1-8-2
  backup-handler:
    image: ${IMAGE_REPO:-lagoon}/backup-handler:${IMAGE_TAG}
    restart: on-failure
    ports:
      - '7778:3000'
    labels:
      lagoon.type: custom
      lagoon.template: services/backup-handler/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/backup-handler:v1-8-2
    depends_on:
      - broker
  broker:
    image: ${IMAGE_REPO:-lagoon}/broker-single:${IMAGE_TAG}
    ports:
      - '15672:15672'
      - '5672:5672'
    labels:
      lagoon.type: rabbitmq-cluster
      lagoon.template: services/broker/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/broker:v1-8-2
  kubernetesmisc:
    image: ${IMAGE_REPO:-lagoon}/kubernetesmisc:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/kubernetesmisc/src:/app/services/kubernetesmisc/src
      #- ./node-packages:/app/node-packages:delegated
    labels:
      lagoon.type: custom
      lagoon.template: services/kubernetesmisc/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/kubernetesmisc:v1-8-2
  kubernetesbuilddeploy:
    image: ${IMAGE_REPO:-lagoon}/kubernetesbuilddeploy:${IMAGE_TAG}
    command: yarn run dev
    environment:
      - CI=${CI:-true}
      - REGISTRY=172.17.0.1:8084 # Docker network bridge and forwarded port for harbor-nginx
    #volumes:
      #- ./services/kubernetesbuilddeploy/src:/app/services/kubernetesbuilddeploy/src
      #- ./node-packages:/app/node-packages:delegated
    labels:
      lagoon.type: custom
      lagoon.template: services/kubernetesbuilddeploy/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/kubernetesbuilddeploy:v1-8-2
  kubernetesdeployqueue:
    image: ${IMAGE_REPO:-lagoon}/kubernetesdeployqueue:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/kubernetesdeployqueue/src:/app/services/kubernetesdeployqueue/src
      #- ./node-packages:/app/node-packages:delegated
    labels:
      lagoon.type: custom
      lagoon.template: services/kubernetesdeployqueue/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/kubernetesdeployqueue:v1-8-2
  kubernetesbuilddeploymonitor:
    image: ${IMAGE_REPO:-lagoon}/kubernetesbuilddeploymonitor:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/kubernetesbuilddeploymonitor/src:/app/services/kubernetesbuilddeploymonitor/src
      #- ./node-packages:/app/node-packages:delegated
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-XXXXXXXXXXXXXXXXXXXX}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-xxxxxxxxxxxxxxxxxxxx}
      - AWS_BUCKET=${AWS_BUCKET:-aws-bucket}
    labels:
      lagoon.type: custom
      lagoon.template: services/kubernetesbuilddeploymonitor/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/kubernetesbuilddeploymonitor:v1-8-2
  kubernetesjobs:
    image: ${IMAGE_REPO:-lagoon}/kubernetesjobs:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/kubernetesjobs/src:/app/services/kubernetesjobs/src
      #- ./node-packages:/app/node-packages:delegated
    environment:
      # Gateway IP in virtualbox, so pods running in minishift can connect to
      # docker-for-mac containers.
      - LAGOON_SSH_HOST=10.0.2.2
    labels:
      lagoon.type: custom
      lagoon.template: services/kubernetesjobs/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/kubernetesjobs:v1-8-2
  kubernetesjobsmonitor:
    image: ${IMAGE_REPO:-lagoon}/kubernetesjobsmonitor:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/kubernetesjobsmonitor/src:/app/services/kubernetesjobsmonitor/src
      #- ./node-packages:/app/node-packages:delegated
    environment:
      # Gateway IP in virtualbox, so pods running in minishift can connect to
      # docker-for-mac containers.
      - LAGOON_SSH_HOST=10.0.2.2
    labels:
      lagoon.type: custom
      lagoon.template: services/kubernetesjobsmonitor/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/kubernetesjobsmonitor:v1-8-2
  kubernetesremove:
    image: ${IMAGE_REPO:-lagoon}/kubernetesremove:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/kubernetesremove/src:/app/services/kubernetesremove/src
      #- ./node-packages:/app/node-packages:delegated
    labels:
      lagoon.type: custom
      lagoon.template: services/kubernetesremove/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/kubernetesremove:v1-8-2
  logs2rocketchat:
    image: ${IMAGE_REPO:-lagoon}/logs2rocketchat:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/logs2rocketchat/src:/app/services/logs2rocketchat/src
      #- ./node-packages:/app/node-packages:delegated
    labels:
      lagoon.type: custom
      lagoon.template: services/logs2rocketchat/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/logs2rocketchat:v1-8-2
  logs2slack:
    image: ${IMAGE_REPO:-lagoon}/logs2slack:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/logs2slack/src:/app/services/logs2slack/src
      #- ./node-packages:/app/node-packages:delegated
    labels:
      lagoon.type: custom
      lagoon.template: services/logs2slack/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/logs2slack:v1-8-2
  logs2microsoftteams:
    image: ${IMAGE_REPO:-lagoon}/logs2microsoftteams:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/logs2microsoftteams/src:/app/services/logs2microsoftteams/src
      #- ./node-packages:/app/node-packages:delegated
    labels:
      lagoon.type: custom
      lagoon.template: services/logs2microsoftteams/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/logs2microsoftteams:v1-8-2
  logs2email:
    image: ${IMAGE_REPO:-lagoon}/logs2email:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/logs2email/src:/app/services/logs2email/src
      #- ./node-packages:/app/node-packages:delegated
    labels:
      lagoon.type: custom
      lagoon.template: services/logs2slack/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/logs2email:v1-8-2
    depends_on:
      - mailhog
  mailhog:
    image: mailhog/mailhog
    ports:
      - 8025
    labels:
      lagoon.type: none
  webhooks2tasks:
    image: ${IMAGE_REPO:-lagoon}/webhooks2tasks:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/webhooks2tasks/src:/app/services/webhooks2tasks/src
      #- ./node-packages:/app/node-packages:delegated
    labels:
      lagoon.type: custom
      lagoon.template: services/webhooks2tasks/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/webhooks2tasks:v1-8-2
  api:
    image: ${IMAGE_REPO:-lagoon}/api:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/api/src:/app/services/api/src
      #- ./node-packages:/app/node-packages:delegated
    depends_on:
      - api-db
      - keycloak
    ports:
      - '3000:3000'
    # Uncomment for local new relic tracking
    # environment:
    #   - NEW_RELIC_LICENSE_KEY=
    #   - NEW_RELIC_APP_NAME=api-local
    labels:
      lagoon.type: custom
      lagoon.template: services/api/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/api:v1-8-2
  ui:
    image: ${IMAGE_REPO:-lagoon}/ui:${IMAGE_TAG}
    command: yarn run dev
    #volumes:
      #- ./services/ui/src:/app/services/ui/src
      #- ./services/ui/.env.defaults:/app/services/ui/.env.defaults
      #- ./services/ui/.env.schema:/app/services/ui/.env.schema
      #- ./services/ui/package.json:/app/services/ui/package.json
    ports:
      - '8888:3000'
    labels:
      lagoon.type: custom
      lagoon.template: services/ui/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/ui:v1-8-2
  ssh:
    image: ${IMAGE_REPO:-lagoon}/ssh:${IMAGE_TAG}
    depends_on:
      - api
      - auth-server
    ports:
      - '2020:2020'
    # command:
    #   - "/usr/sbin/sshd"
    #   - "-e"
    #   - "-ddd"
    #   - "-f"
    #   - "/etc/ssh/sshd_config"
    user: '111111111'
    #volumes:
      #- ./services/ssh/home/command.sh:/home/command.sh
      #- ./services/ssh/home/rsh.sh:/home/rsh.sh
    labels:
      lagoon.type: custom
      lagoon.template: services/ssh/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/ssh:v1-8-2
  auth-server:
    image: ${IMAGE_REPO:-lagoon}/auth-server:${IMAGE_TAG}
    command: yarn run dev
    environment:
      - JWTISSUER=auth-server.dev
      - JWTAUDIENCE=api.dev
    #volumes:
      #- ./services/auth-server/src:/app/services/auth-server/src
    ports:
      - '3001:3000'
    labels:
      lagoon.type: custom
      lagoon.template: services/auth-server/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/auth-server:v1-8-2
  keycloak:
    image: ${IMAGE_REPO:-lagoon}/keycloak:${IMAGE_TAG}
    user: '111111111'
    depends_on:
      - keycloak-db
    ports:
      - '8088:8080'
    labels:
      lagoon.type: custom
      lagoon.template: services/keycloak/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/keycloak:v1-8-2
  keycloak-db:
    image: ${IMAGE_REPO:-lagoon}/keycloak-db:${IMAGE_TAG}
    ports:
      - '3336:3306'
    labels:
      lagoon.type: custom
      lagoon.template: services/keycloak-db/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/keycloak-db:v1-8-2
  tests-kubernetes:
    image: ${IMAGE_REPO:-lagoon}/tests:${IMAGE_TAG}
    environment:
      - CLUSTER_TYPE=kubernetes
      - WEBHOOK_HOST=webhook-handler
      - WEBHOOK_PORT=3000
      - WEBHOOK_PROTOCOL=http
      - ROUTE_SUFFIX_HTTP=172.17.0.1.xip.io
      - ROUTE_SUFFIX_HTTP_PORT=18080
      - ROUTE_SUFFIX_HTTPS=172.17.0.1.xip.io
      - ROUTE_SUFFIX_HTTPS_PORT=18443
      - WEBHOOK_REPO_PREFIX=ssh://git@172.17.0.1:2222/git/
      - GIT_REPO_PREFIX=git@local-git:/git/
      - SSH_PRIVATE_KEY=-----BEGIN RSA PRIVATE KEY-----\n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\n-----END RSA PRIVATE KEY-----
      - SSH_HOST=ssh
      - SSH_PORT=2020
      - API_HOST=api
      - API_PROTOCOL=http
      - API_PORT=3000
      - KEYCLOAK_AUTH_SERVER_CLIENT_SECRET=f605b150-7636-4447-abd3-70988786b330
      - DELETED_STATUS_CODE=404
    volumes:
      - ./tests:/ansible
    labels:
      lagoon.type: none
  local-git:
    image: ${IMAGE_REPO:-lagoon}/local-git:${IMAGE_TAG}
    environment:
      - GIT_AUTHORIZED_KEYS=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDEZlms5XsiyWjmnnUyhpt93VgHypse9Bl8kNkmZJTiM3Ex/wZAfwogzqd2LrTEiIOWSH1HnQazR+Cc9oHCmMyNxRrLkS/MEl0yZ38Q+GDfn37h/llCIZNVoHlSgYkqD0MQrhfGL5AulDUKIle93dA6qdCUlnZZjDPiR0vEXR36xGuX7QYAhK30aD2SrrBruTtFGvj87IP/0OEOvUZe8dcU9G/pCoqrTzgKqJRpqs/s5xtkqLkTIyR/SzzplO21A+pCKNax6csDDq3snS8zfx6iM8MwVfh8nvBW9seax1zBvZjHAPSTsjzmZXm4z32/ujAn/RhIkZw3ZgRKrxzryttGnWJJ8OFyF31JTJgwWWuPdH53G15PC83ZbmEgSV3win51RZRVppN4uQUuaqZWG9wwk2a6P5aen1RLCSLpTkd2mAEk9PlgmJrf8vITkiU9pF9n68ENCoo556qSdxW2pxnjrzKVPSqmqO1Xg5K4LOX4/9N4n4qkLEOiqnzzJClhFif3O28RW86RPxERGdPT81UI0oDAcU5euQr8Emz+Hd+PY1115UIld3CIHib5PYL9Ee0bFUKiWpR/acSe1fHB64mCoHP7hjFepGsq7inkvg2651wUDKBshGltpNkMj6+aZedNc0/rKYyjl80nT8g8QECgOSRzpmYp0zli2HpFoLOiWw== ansible-testing
    ports:
      - '2222:22'
    labels:
      lagoon.type: none
  remotedev:
    image: jhen0409/remotedev-server
    command: node main.js
    environment:
      - ADAPTER=
      - PORT=9090
    ports:
      - '9090:9090'
    labels:
      lagoon.type: none
  local-api-data-watcher-pusher:
    depends_on:
      - api
    image: ${IMAGE_REPO:-lagoon}/local-api-data-watcher-pusher:${IMAGE_TAG}
    volumes:
      - ./local-dev/api-data:/api-data
      - ./local-dev/api-data-watcher-pusher:/home
    labels:
      lagoon.type: none
  local-dbaas-provider:
    image: ${IMAGE_REPO:-lagoon}/local-dbaas-provider:${IMAGE_TAG}
    restart: always
    labels:
      lagoon.type: none
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
  local-minio:
    image: minio/minio
    entrypoint: sh
    command: -c 'mkdir -p /export/lagoon-files && mkdir -p /export/harbor-images && /usr/bin/minio server /export'
    ports:
      - '9000:9000'
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    labels:
      lagoon.type: none
  local-registry:
    image: ${IMAGE_REPO:-lagoon}/local-registry:${IMAGE_TAG}
    ports:
      - '5000:5000'
    labels:
      lagoon.type: none
  drush-alias:
    image: ${IMAGE_REPO:-lagoon}/drush-alias:${IMAGE_TAG}
    #volumes:
      #- ./services/drush-alias/web/aliases.drushrc.php.stub:/app/aliases.drushrc.php.stub
    ports:
      - '8087:8080'
    labels:
      lagoon.type: custom
      lagoon.template: services/drush-alias/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/drush-alias:v1-8-2
      version: '2'
  logs-db:
    image: ${IMAGE_REPO:-lagoon}/logs-db:${IMAGE_TAG}
    user: '111111111'
    environment:
      KEYCLOAK_URL: http://keycloak:8080
    ports:
      - '9200:9200'
    networks:
      default:
        aliases:
          - logs-db-service
    labels:
      lagoon.type: elasticsearch
      lagoon.template: services/logs-db/.lagoon.single.yml
      lagoon.image: amazeeiolagoon/logs-db:v1-8-2
  logs-forwarder:
    image: ${IMAGE_REPO:-lagoon}/logs-forwarder:${IMAGE_TAG}
    user: '111111111'
    labels:
      lagoon.type: custom
      lagoon.template: services/logs-forwarder/.lagoon.single.yml
      lagoon.image: amazeeiolagoon/logs-forwarder:v1-8-2
  logs-db-ui:
    image: ${IMAGE_REPO:-lagoon}/logs-db-ui:${IMAGE_TAG}
    user: '111111111'
    ports:
      - '5601:5601'
    environment:
      KEYCLOAK_URL: http://${KEYCLOAK_URL:-docker.for.mac.localhost:8088}
      LOGSDB_UI_URL: http://0.0.0.0:5601
    labels:
      lagoon.type: kibana
      lagoon.template: services/logs-db-ui/.lagoon.yml
      lagoon.image: amazeeiolagoon/logs-db-ui:v1-8-2
  logs-db-curator:
    image: ${IMAGE_REPO:-lagoon}/logs-db-curator:${IMAGE_TAG}
    user: '111111111'
    labels:
      lagoon.type: cli
      lagoon.template: services/logs-db-curator/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/logs-db-curator:v1-8-2
  logs2logs-db:
    image: ${IMAGE_REPO:-lagoon}/logs2logs-db:${IMAGE_TAG}
    user: '111111111'
    command:
      - '--config.reload.automatic'
      - '--config.reload.interval'
      - '1s'
    ports:
      - '5140:5140/udp'
      - '5141:5141/udp'
    #volumes:
      #- './services/logs2logs-db/pipeline:/usr/share/logstash/pipeline'
    labels:
      lagoon.type: logstash
      lagoon.template: services/logs2logs-db/.lagoon.yml
      lagoon.image: amazeeiolagoon/logs2logs-db:v1-8-2
  auto-idler:
    image: ${IMAGE_REPO:-lagoon}/auto-idler:${IMAGE_TAG}
    user: '111111111'
    #volumes:
      #- './services/auto-idler/idle-services.sh:/idle-services.sh'
      #- './services/auto-idler/idle-clis.sh:/idle-clis.sh'
      #- './services/auto-idler/openshift-services.sh:/openshift-services.sh'
      #- './services/auto-idler/openshift-clis.sh:/openshift-clis.sh'
      #- './services/auto-idler/create_jwt.py:/create_jwt.py'
    labels:
      lagoon.type: custom
      lagoon.template: services/auto-idler/.lagoon.yml
      lagoon.image: amazeeiolagoon/auto-idler:v1-8-2
  storage-calculator:
    image: ${IMAGE_REPO:-lagoon}/storage-calculator:${IMAGE_TAG}
    user: '111111111'
    #volumes:
      #- './services/storage-calculator/calculate-storage.sh:/calculate-storage.sh'
    labels:
      lagoon.type: custom
      lagoon.template: services/storage-calculator/.lagoon.yml
      lagoon.image: amazeeiolagoon/storage-calculator:v1-8-2
  logs-collector:
    image: openshift/origin-logging-fluentd:v3.11.0
    labels:
      lagoon.type: custom
      lagoon.template: services/logs-collector/.lagoon.yml
      lagoon.rollout: daemonset
  harbor-core:
    image: ${IMAGE_REPO:-lagoon}/harbor-core:${IMAGE_TAG}
    hostname: harbor-core
    volumes:
      - ${PWD}/local-dev/harbor-core-ci_app.conf:/etc/core/app.conf
      - ${PWD}/local-dev/harbor-core-ci_secret.key:/etc/core/key
      - ${PWD}/local-dev/harbor-core-ci_tls.key:/etc/core/private_key.pem
      - /etc/core/token
    depends_on:
      - harbor-database
      - harbor-redis
    ports:
      - '8081:8080'
    environment:
      - DATABASE_TYPE=postgresql
      - POSTGRESQL_HOST=harbor-database
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=test123
      - POSTGRESQL_DATABASE=registry
      - POSTGRESQL_SSLMODE=disable
      - POSTGRESQL_MAX_IDLE_CONNS=50
      - POSTGRESQL_MAX_OPEN_CONNS=100
      - CORE_URL=http://harbor-core:8080
      - JOBSERVICE_URL=http://harbor-jobservice:8080
      - REGISTRY_URL=http://harborregistry:5000
      - TOKEN_SERVICE_URL=http://harbor-core:8080/service/token
      - WITH_NOTARY=false
      - CFG_EXPIRATION=5
      - ADMIRAL_URL=NA
      - WITH_CLAIR=true
      - CLAIR_DB_HOST=harbor-database
      - CLAIR_DB_PORT=5432
      - CLAIR_DB_USERNAME=postgres
      - CLAIR_DB=postgres
      - CLAIR_DB_SSLMODE=disable
      - CLAIR_URL=http://harbor-trivy:6060
      - CLAIR_ADAPTER_URL=http://harbor-trivy:8080
      - REGISTRY_STORAGE_PROVIDER_NAME=s3
      - WITH_CHARTMUSEUM=false
      - LOG_LEVEL=error
      - CONFIG_PATH=/etc/core/app.conf
      - SYNC_REGISTRY=false
      - CHART_CACHE_DRIVER=redis
      - _REDIS_URL=harbor-redis:6379,100,
      - _REDIS_URL_REG=redis://harbor-redis:6379/2
      - PORTAL_URL=http://harbor-portal:8080
      - REGISTRYCTL_URL=http://harborregistryctl:8080
      - CLAIR_HEALTH_CHECK_SERVER_URL=http://harbor-trivy:6061
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - NO_PROXY=harbor-core,harbor-jobservice,harbor-database,harborregistry,harbor-portal,harbor-trivy,127.0.0.1,localhost,.local,.internal
      - HARBOR_NGINX_ENDPOINT=http://harbor-nginx:8080
      - ROBOT_TOKEN_DURATION=500
      - CORE_SECRET=secret123
      - JOBSERVICE_SECRET=secret123
      - REGISTRY_HTTP_SECRET=secret123
      - HARBOR_ADMIN_PASSWORD=admin
      - CLAIR_DB_PASSWORD=test123
      - WITH_TRIVY=true
      - TRIVY_ADAPTER_URL=http://harbor-trivy:8080
    restart: always
    labels:
      lagoon.type: custom
      lagoon.template: services/harbor-core/harbor-core.yml
      lagoon.image: amazeeiolagoon/harbor-core:v1-8-2
  harbor-database:
    image: ${IMAGE_REPO:-lagoon}/harbor-database:${IMAGE_TAG}
    hostname: harbor-database
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_PASSWORD=test123
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    restart: always
    labels:
      lagoon.type: custom
      lagoon.template: services/harbor-database/harbor-database.yml
      lagoon.image: amazeeiolagoon/harbor-database:v1-8-2
  harbor-jobservice:
    image: ${IMAGE_REPO:-lagoon}/harbor-jobservice:${IMAGE_TAG}
    hostname: harbor-jobservice
    ports:
      - '8083:8080'
    volumes:
      - /tmp
      - ${PWD}/local-dev/harbor-jobservice-ci_config.yaml:/etc/jobservice/config.yml
    depends_on:
      - harbor-database
      - harbor-redis
      - harbor-nginx
    environment:
      - CORE_SECRET=secret123
      - JOBSERVICE_SECRET=secret123
      - CORE_URL=http://harbor-core:8080
      - REGISTRY_CONTROLLER_URL=http://harborregistryctl:8080
      - LOG_LEVEL=error
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - NO_PROXY=harbor-core,harbor-jobservice,harbor-database,harborregistry,harbor-portal,harbor-trivy,127.0.0.1,localhost,.local,.internal
      - SCANNER_CLAIR_DATABASE_URL=postgres://postgres:test123@harbor-database:5432/postgres?sslmode=disable
      - SCANNER_STORE_REDIS_URL=redis://harbor-redis:6379/4
      - SCANNER_LOG_LEVEL=error
    restart: always
    labels:
      lagoon.type: custom
      lagoon.template: services/harbor-jobservice/harbor-jobservice.yml
      lagoon.image: amazeeiolagoon/harbor-jobservice:v1-8-2
  harbor-nginx:
    image: ${IMAGE_REPO:-lagoon}/harbor-nginx:${IMAGE_TAG}
    hostname: harbor-nginx
    ports:
      - '8084:8080'
    volumes:
      - ${PWD}/local-dev/harbor-nginx-ci_nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - harbor-core
      - harborregistry
      - harbor-portal
    restart: always
    labels:
      lagoon.type: custom
      lagoon.template: services/harbor-nginx/harbor-nginx.yml
      lagoon.image: amazeeiolagoon/harbor-nginx:v1-8-2
  harbor-portal:
    image: ${IMAGE_REPO:-lagoon}/harbor-portal:${IMAGE_TAG}
    hostname: harbor-portal
    ports:
      - '8085:8080'
    restart: always
    labels:
      lagoon.type: custom
      lagoon.template: services/harbor-portal/harbor-portal.yml
      lagoon.image: amazeeiolagoon/harbor-portal:v1-8-2
  harbor-redis:
    image: ${IMAGE_REPO:-lagoon}/harbor-redis:${IMAGE_TAG}
    hostname: harbor-redis
    volumes:
      - /var/lib/redis
    restart: always
    labels:
      lagoon.type: custom
      lagoon.template: services/harbor-redis/harbor-redis.yml
      lagoon.image: amazeeiolagoon/harbor-redis:v1-8-2
  harbor-trivy:
    image: ${IMAGE_REPO:-lagoon}/harbor-trivy:${IMAGE_TAG}
    hostname: harbor-trivy
    volumes:
      - /tmp
    depends_on:
      - harbor-redis
      - harbor-database
    environment:
      - SCANNER_LOG_LEVEL=error
      - SCANNER_TRIVY_CACHE_DIR=/home/scanner/.cache/trivy
      - SCANNER_TRIVY_REPORTS_DIR=/home/scanner/.cache/reports
      - SCANNER_TRIVY_DEBUG_MODE=false
      - SCANNER_TRIVY_VULN_TYPE=os,library
      - SCANNER_TRIVY_GITHUB_TOKEN=
      - SCANNER_TRIVY_SEVERITY=UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      - SCANNER_TRIVY_IGNORE_UNFIXED=false
      - SCANNER_TRIVY_SKIP_UPDATE=false
      - SCANNER_STORE_REDIS_URL=redis://harbor-redis:6379/5
      - SCANNER_JOB_QUEUE_REDIS_URL=redis://harbor-redis:6379/5
      - TRIVY_NON_SSL=true
    restart: on-failure
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1g
    labels:
      lagoon.type: custom
      lagoon.template: services/harbor-trivy/harbor-trivy.yml
      lagoon.name: harbor-trivy
      lagoon.image: amazeeiolagoon/harbor-trivy:v1-8-2
  harborregistry:
    image: ${IMAGE_REPO:-lagoon}/harborregistry:${IMAGE_TAG}
    hostname: harborregistry
    volumes:
      - ${PWD}/local-dev/harborregistry-ci_config.yaml:/etc/registry/config.yml
      - ${PWD}/local-dev/harbor-core-ci_tls.crt:/etc/registry/root.crt
    depends_on:
      - harbor-database
      - harbor-redis
    environment:
      - HARBOR_NGINX_ENDPOINT=http://harbor-nginx:8080
      - REGISTRY_REDIS_PASSWORD=
      - CORE_SECRET=secret123
      - JOBSERVICE_SECRET=secret123
      - REGISTRY_HTTP_SECRET=secret123
    restart: always
    command: ["serve", "/etc/registry/config.yml"]
    labels:
      lagoon.type: custom
      lagoon.template: services/harborregistry/harborregistry.yml
      lagoon.name: harborregistry
      lagoon.image: amazeeiolagoon/harborregistry:v1-8-2
  harborregistryctl:
    image: ${IMAGE_REPO:-lagoon}/harborregistryctl:${IMAGE_TAG}
    hostname: harborregistryctl
    volumes:
      - ${PWD}/local-dev/harborregistryctl-ci_config.yaml:/etc/registryctl/config.yml
    environment:
      - REGISTRY_REDIS_PASSWORD=
      - CORE_SECRET=secret123
      - JOBSERVICE_SECRET=secret123
      - REGISTRY_HTTP_SECRET=secret123
    labels:
      lagoon.type: custom
      lagoon.template: services/harborregistryctl/harborregistry.yml
      lagoon.name: harborregistry
      lagoon.image: amazeeiolagoon/harborregistryctl:v1-8-2
  api-redis:
    image: ${IMAGE_REPO:-lagoon}/api-redis:${IMAGE_TAG}
    labels:
      lagoon.type: custom
      lagoon.template: services/api-redis/.lagoon.app.yml
      lagoon.image: amazeeiolagoon/api-redis:v1-8-2
